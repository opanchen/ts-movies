{"version":3,"file":"static/js/178.37b37a6c.chunk.js","mappings":"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","sources":["webpack://ts-movies/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Movies_section__bjPDA\",\"form-wrapper\":\"Movies_form-wrapper__YIIZB\"};","import { useEffect, useRef, useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { useLangState } from \"src/hooks\";\nimport { moviesAPI } from \"src/services/moviesAPI\";\nimport {\n  Container,\n  FallbackView,\n  LoadMoreBtn,\n  MovieList,\n  SearchForm,\n  Spinner,\n} from \"src/components\";\nimport { toast } from \"react-toastify\";\nimport css from \"./Movies.module.css\";\n\ntype MovieType = {\n  title: string;\n  original_title: string;\n  overview: string;\n  backdrop_path: string;\n  poster_path: string;\n  release_date: string;\n  id: number;\n  media_type: string;\n  original_language: string;\n  popularity: number;\n  vote_average: number;\n  vote_count: number;\n  genre_ids: number[];\n  [key: string]: unknown;\n};\n\nconst Movies: React.FC = () => {\n  const [movies, setMovies] = useState<MovieType[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [page, setPage] = useState<number>(1);\n  const [totalPages, setTotalPages] = useState<number>(0);\n  const [totalResults, setTotalResults] = useState<number>(0);\n  const { lang } = useLangState();\n  const isLoadingMore = useRef(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get(\"query\");\n\n  const cleanState = () => {\n    setMovies([]);\n    setPage(1);\n    setTotalPages(0);\n    setTotalResults(0);\n    setError(null);\n  };\n\n  const onSearchFormSubmit = (query: string) => {\n    cleanState();\n    setSearchParams({ query });\n  };\n\n  useEffect(() => {\n    if (!query) return;\n\n    const loadMovies = async () => {\n      try {\n        setError(null);\n        setIsLoading(true);\n\n        const resultsArr: MovieType[] = [];\n\n        for (let i = 0; i < page; i += 1) {\n          const data = await moviesAPI.getMoviesByQuery({\n            query,\n            language: lang,\n            page: i + 1,\n          });\n          // if (!data) throw new Error(\"There is no fetched data.\");\n          if (!data || data.results.length === 0) {\n            const errorMessage =\n              lang === \"en-US\"\n                ? \"Movies with this query weren't found. Please enter valid query and try again!\"\n                : \"Фільмів за даним запитом не знайдено. Будь ласка, введіть валідний запит та спробуйте знову!\";\n            setError(errorMessage);\n            return;\n          }\n\n          if (totalPages !== data.total_pages) setTotalPages(data.total_pages);\n\n          if (totalResults !== data.total_results) {\n            const message =\n              lang === \"en-US\"\n                ? `Number of successful search results: ${data.total_results}!`\n                : `Кількість успішних результатів пошуку: ${data.total_results}!`;\n\n            toast.success(message);\n            setTotalResults(data.total_results);\n          }\n\n          resultsArr.push(...data.results);\n          // console.log(`Fetch operation for page ${i + 1}...`);\n        }\n\n        // Additional filter-operation to prevent response movie-items duplication inside main array:\n        setMovies((prevMovies) => {\n          // case of first fetch (component did mount):\n          if (prevMovies.length === 0) return resultsArr;\n\n          // case of ui-language change with the same search query:\n          const uniqueIds = resultsArr\n            .map(({ id }) => id)\n            .filter((id, index, array) => array.indexOf(id) === index);\n          const uniqueResults = uniqueIds.map((uniqueId) => {\n            const singleItem = resultsArr.find(({ id }) => id === uniqueId);\n            return singleItem ? singleItem : resultsArr[0];\n          });\n\n          return uniqueResults;\n        });\n        // console.log(\"Movies have been updated.\");\n      } catch (error) {\n        console.log(error);\n        const errorMessage =\n          lang === \"en-US\"\n            ? \"Something went wrong. Please try again later!\"\n            : \"Щось пішло не так... Будь ласка, повторіть спробу пізніше!\";\n        setError(errorMessage);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    const loadMoreMovies = async () => {\n      try {\n        setError(null);\n        setIsLoading(true);\n\n        const data = await moviesAPI.getMoviesByQuery({\n          query,\n          language: lang,\n          page,\n        });\n        // console.log(data);\n\n        if (!data || data.results.length === 0) {\n          throw new Error(\"There is no fetched data.\");\n        }\n\n        const { results, total_pages, total_results } = data;\n\n        setMovies((prevMovies) => {\n          // Additional filter-operation to prevent response movie-items duplication inside main array:\n          const filteredResults = results.filter((item) => {\n            return prevMovies.map(({ id }) => id).indexOf(item.id) === -1;\n          });\n\n          return [...prevMovies, ...filteredResults];\n        });\n\n        if (totalPages !== total_pages) setTotalPages(total_pages);\n\n        if (totalResults !== total_results) {\n          const message =\n            lang === \"en-US\"\n              ? `Number of successful search results: ${total_results}!`\n              : `Кількість успішних результатів пошуку: ${total_results}!`;\n\n          toast.success(message);\n          setTotalResults(total_results);\n        }\n      } catch (error) {\n        console.log(error);\n        const errorMessage =\n          lang === \"en-US\"\n            ? \"Something went wrong. Please try again later!\"\n            : \"Щось пішло не так... Будь ласка, повторіть спробу пізніше!\";\n        setError(errorMessage);\n      } finally {\n        setIsLoading(false);\n        isLoadingMore.current = false;\n      }\n    };\n\n    // Determine which dependency array variable causes server request: 'loading more' operation or UI-language change.\n    isLoadingMore.current === false ? loadMovies() : loadMoreMovies();\n\n    // const loadMovies = async () => {\n    //   setIsLoading(true);\n\n    //   try {\n    //     const data = await moviesAPI.getMoviesByQuery({\n    //       query,\n    //       language: lang,\n    //       page,\n    //     });\n    //     // console.log(data);\n\n    //     if (!data || data.results.length === 0) {\n    //       const errorMessage =\n    //         lang === \"en-US\"\n    //           ? \"Movies with this query weren't found. Please enter valid query and try again!\"\n    //           : \"Фільмів за даним запитом не знайдено. Будь ласка, введіть валідний запит та спробуйте знову!\";\n    //       setError(errorMessage);\n    //       return;\n    //     }\n\n    //     const { results, total_pages, total_results } = data;\n\n    //     setMovies((prevMovies) => {\n    //       // Additional filter-operation to prevent response movie-items duplication inside main array:\n    //       const filteredResults = results.filter((item) => {\n    //         return prevMovies.map(({ id }) => id).indexOf(item.id) === -1;\n    //       });\n\n    //       return [...prevMovies, ...filteredResults];\n    //     });\n\n    //     if (totalPages !== total_pages) setTotalPages(total_pages);\n\n    //     if (totalResults !== total_results) {\n    //       const message =\n    //         lang === \"en-US\"\n    //           ? `Number of successful search results: ${total_results}!`\n    //           : `Кількість успішних результатів пошуку: ${total_results}!`;\n\n    //       toast.success(message);\n    //       setTotalResults(total_results);\n    //     }\n    //   } catch (error) {\n    //     console.log(error);\n    //     const errorMessage =\n    //       lang === \"en-US\"\n    //         ? \"Something went wrong. Please try again later!\"\n    //         : \"Щось пішло не так... Будь ласка, повторіть спробу пізніше!\";\n    //     setError(errorMessage);\n    //   } finally {\n    //     setIsLoading(false);\n    //   }\n    // };\n    // loadMovies();\n  }, [lang, page, query, totalPages, totalResults]);\n\n  const handleLoadMore = () => {\n    isLoadingMore.current = true;\n    setPage((prevPage) => prevPage + 1);\n  };\n\n  const defaultFallbackMessage: string =\n    lang === \"en-US\"\n      ? \"There are no movies yet. Enter your query to find some...\"\n      : \"Наразі фільми відсутні. Введіть Ваш запит для пошуку...\";\n\n  return (\n    <section className={css.section}>\n      <Container>\n        <h1 className=\"visually-hidden\">\n          {lang === \"en-US\" ? \"Search movies\" : \"Пошук фільмів\"}\n        </h1>\n        <div className={css[\"form-wrapper\"]}>\n          <SearchForm onSubmit={onSearchFormSubmit} />\n        </div>\n        {isLoading && <Spinner />}\n        {error && <FallbackView type=\"error\" message={error} />}\n        {!error && movies.length === 0 && (\n          <FallbackView type=\"init\" message={defaultFallbackMessage} />\n        )}\n        {!error && movies.length > 0 && (\n          <>\n            <MovieList movies={movies} />\n            {page !== totalPages && (\n              <LoadMoreBtn onLoadMore={handleLoadMore} isLoading={isLoading} />\n            )}\n          </>\n        )}\n      </Container>\n    </section>\n  );\n};\n\nexport default Movies;\n"],"names":["_useState","useState","_useState2","_slicedToArray","movies","setMovies","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","_useState7","_useState8","page","setPage","_useState9","_useState10","totalPages","setTotalPages","_useState11","_useState12","totalResults","setTotalResults","lang","useLangState","isLoadingMore","useRef","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","query","get","useEffect","_ref","_ref4","current","_asyncToGenerator","_regeneratorRuntime","mark","_callee","resultsArr","i","data","message","wrap","_context","prev","next","moviesAPI","getMoviesByQuery","language","sent","results","length","abrupt","total_pages","total_results","concat","toast","success","push","apply","_toConsumableArray","prevMovies","map","_ref2","id","filter","index","array","indexOf","uniqueId","singleItem","find","_ref3","t0","console","log","finish","stop","arguments","loadMovies","_callee2","_context2","Error","filteredResults","item","_ref5","loadMoreMovies","defaultFallbackMessage","_jsx","className","css","children","_jsxs","Container","SearchForm","onSubmit","Spinner","FallbackView","type","_Fragment","MovieList","LoadMoreBtn","onLoadMore","prevPage"],"sourceRoot":""}