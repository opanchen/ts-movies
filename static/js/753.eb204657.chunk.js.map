{"version":3,"file":"static/js/753.eb204657.chunk.js","mappings":"0QACA,EAA0B,8BAA1B,EAAkE,8B,UCiFlE,EAhE+B,WAC7B,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAA0BC,EAAAA,EAAAA,UAAwC,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhEI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,GAA0BL,EAAAA,EAAAA,UAAwB,MAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAhDE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAAkCT,EAAAA,EAAAA,WAAkB,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAnDE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GACtBG,GAASC,EAAAA,EAAAA,MAATD,KAEFE,GAAaC,EAAAA,EAAAA,IAAeC,EAAAA,IAE5BC,GAAcC,EAAAA,EAAAA,IAAiB,CAAEC,GAAIvB,EAASwB,IAAKN,IA2BzD,OAxBAO,EAAAA,EAAAA,YAAU,WAAO,IAADC,EACd,GAAK1B,EAAL,EAEe,YAAA0B,EAAAA,IAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACG,OAAnBpB,GAAa,GAAMkB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGEC,EAAAA,EAAUC,WAAW,CACtCd,GAAIvB,EACJsC,SAAUtB,IACT,KAAD,EAHIe,EAAIE,EAAAM,KAKVhC,EAASwB,GAAME,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,SAEfQ,QAAQC,IAAGT,EAAAO,IACX7B,EAAS,mDAAmD,QAExC,OAFwCsB,EAAAC,KAAA,GAE5DnB,GAAa,GAAOkB,EAAAU,OAAA,6BAAAV,EAAAW,OAAA,GAAAd,EAAA,yBAEvBe,MAAA,KAAAC,UAAA,CAEDC,EApBoB,CAqBtB,GAAG,CAAC/B,EAAMhB,KAGRgD,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAAAF,UACLC,EAAAA,EAAAA,KAAA,SAAAD,SAAiB,UAATlC,EAAmB,gBAAkB,iFAG/CgC,EAAAA,EAAAA,MAAA,OAAKK,UAAWC,EAAYJ,SAAA,EAC1BC,EAAAA,EAAAA,KAACI,EAAAA,GAAS,CAAAL,UACRF,EAAAA,EAAAA,MAAA,OAAKK,UAAWC,EAAeJ,SAAA,EAC7BC,EAAAA,EAAAA,KAACK,EAAAA,GAAW,KACV9C,GAASV,GAAWM,IACpB6C,EAAAA,EAAAA,KAACM,EAAAA,GAAU,CAAClC,GAAIvB,EAASqB,YAAaA,SAI3CP,IAAaqC,EAAAA,EAAAA,KAACO,EAAAA,GAAO,IACrBhD,IAASyC,EAAAA,EAAAA,KAACQ,EAAAA,GAAY,CAACC,KAAK,QAAQC,QAASnD,KAC5CA,GAASJ,IACT0C,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACW,EAAAA,GAAY,CAACxD,MAAOA,KACrB6C,EAAAA,EAAAA,KAACY,EAAAA,GAAc,YAM3B,C","sources":["webpack://ts-movies/./src/pages/MovieDetails/MovieDetails.module.css?0c24","pages/MovieDetails/MovieDetails.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"MovieDetails_wrapper__YMWLn\",\"btn-bar\":\"MovieDetails_btn-bar__KmENz\"};","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { selectCollectionEn } from \"src/redux/selectors\";\nimport { isMovieCollected } from \"src/helpers\";\nimport { useAppSelector, useLangState } from \"src/hooks\";\nimport { moviesAPI } from \"src/services/moviesAPI\";\nimport { Helmet } from \"react-helmet\";\nimport {\n  BackLinkBtn,\n  CollectBnt,\n  Container,\n  FallbackView,\n  MovieArticle,\n  MovieExtraInfo,\n  Spinner,\n} from \"src/components\";\nimport css from \"./MovieDetails.module.css\";\n\nconst MovieDetails: React.FC = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState<{ [key: string]: any } | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const { lang } = useLangState();\n\n  const collection = useAppSelector(selectCollectionEn);\n  // ! Temporary use only En-collection...\n  const isCollected = isMovieCollected({ id: movieId, arr: collection });\n  // console.log(isCollected);\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const fetchData = async () => {\n      setIsLoading(true);\n\n      try {\n        const data = await moviesAPI.getDetails({\n          id: movieId,\n          language: lang,\n        });\n        // console.log(data);\n        setMovie(data);\n      } catch (error) {\n        console.log(error);\n        setError(\"Something went wrong... Please try again later.\");\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [lang, movieId]);\n\n  return (\n    <>\n      <Helmet>\n        <title>{lang === \"en-US\" ? \"Movie details\" : \"Деталі фільму\"}</title>\n      </Helmet>\n\n      <div className={css.wrapper}>\n        <Container>\n          <div className={css[\"btn-bar\"]}>\n            <BackLinkBtn />\n            {!error && movieId && movie && (\n              <CollectBnt id={movieId} isCollected={isCollected} />\n            )}\n          </div>\n        </Container>\n        {isLoading && <Spinner />}\n        {error && <FallbackView type=\"error\" message={error} />}\n        {!error && movie && (\n          <>\n            <MovieArticle movie={movie} />\n            <MovieExtraInfo />\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["movieId","useParams","_useState","useState","_useState2","_slicedToArray","movie","setMovie","_useState3","_useState4","error","setError","_useState5","_useState6","isLoading","setIsLoading","lang","useLangState","collection","useAppSelector","selectCollectionEn","isCollected","isMovieCollected","id","arr","useEffect","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","moviesAPI","getDetails","language","sent","t0","console","log","finish","stop","apply","arguments","fetchData","_jsxs","_Fragment","children","_jsx","Helmet","className","css","Container","BackLinkBtn","CollectBnt","Spinner","FallbackView","type","message","MovieArticle","MovieExtraInfo"],"sourceRoot":""}